{"version":3,"sources":["assets/logo.png","components/header/header.component.jsx","components/card/card-item.component.jsx","components/card/card-list.component.jsx","components/chart/spline-chart.component.jsx","components/chart/grid-chart.component.jsx","components/tab/tab-panel.component.jsx","components/tab/tab-list.component.jsx","api/index.js","components/dashboard/dashboard.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","div","width","title","textAlign","fontSize","img","height","Header","classes","className","alt","src","Logo","CardComponent","subtitle","value","lastUpdate","Grid","item","xs","sm","md","lg","xl","Card","CardContent","Typography","color","gutterBottom","variant","component","start","end","duration","separator","Date","toDateString","root","marginBottom","CardList","lastDailyCases","cumulativeCases","lastUpdated","container","spacing","justify","Line","props","Path","path","line","x","arg","y","val","curve","curveCatmullRom","Text","withStyles","text","split","mainText","subText","Root","display","margin","flexDirection","name","restProps","Label","label","whiteSpace","Item","SplineChart","country","Paper","data","chartData","showLabels","showTicks","valueField","argumentField","seriesComponent","position","rootComponent","itemComponent","labelComponent","textComponent","columns","DateFormatter","replace","DateTypeProvider","formatterComponent","padding","GridChart","useState","dateColumns","rows","gridData","defaultCurrentPage","pageSize","for","backgroundColor","palette","background","paper","marginLeft","marginRight","TabPanel","index","role","hidden","id","aria-labelledby","flexGrow","tabs","minWidth","borderRight","divider","tab","panels","VerticalTabs","React","setValue","Tabs","orientation","onChange","event","newValue","aria-label","map","Tab","countriesData","ukData","fetchData","a","fetchCountryData","fetchUkData","sortData","axios","get","console","log","convertData","areaCode","areaName","areaType","cumCasesByPublishDate","cumCasesBySpecimenDate","date","newCasesByPublishDate","newCasesBySpecimenDate","countryList","Set","unshift","getDataByCountry","filteredData","filter","d","rawData","first","sliceReverse","countryData","reverse","Dashboard","state","this","setState","Component","App","styles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43dcfc6e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.8ad205b8.png\";","import React from 'react';\r\nimport Logo from '../../assets/logo.png';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    div: {\r\n        width: '100%'\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n        fontSize: '36px'\r\n    },\r\n    img: {\r\n        height: '27px'\r\n    }\r\n\r\n}));\r\n\r\nexport default function Header() {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.div}>\r\n            <h1 className={classes.title}>C\r\n                <img className={classes.img} alt='logo' src={Logo} />\r\n                VID-19 UK\r\n            </h1>\r\n        </div>);\r\n}\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\nexport default function CardComponent({ title, subtitle, value, lastUpdate }) {\r\n\r\n    return (\r\n        <Grid item xs={6} sm={6} md={6} lg={6} xl={6} >\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                        {title}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        <CountUp start={0} end={value} duration={2.75} separator=\",\" />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        {subtitle}\r\n                    </Typography>\r\n                </CardContent></Card>\r\n        </Grid >\r\n    );\r\n};","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardComponent from './card-item.component';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '20%',\r\n        marginBottom: '0.5rem'\r\n    }\r\n}));\r\n\r\nexport default function CardList({ lastDailyCases, cumulativeCases, lastUpdated }) {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div >\r\n            <Grid container className={classes.root} spacing={3} justify='center'>\r\n\r\n                <CardComponent\r\n                    title=\"Daily\"\r\n                    subtitle=\"Number of active cases\"\r\n                    value={lastDailyCases}\r\n                    lastUpdate={lastUpdated}\r\n                />\r\n                <CardComponent\r\n                    title=\"Cumulative\"\r\n                    subtitle=\"Number of cumulative cases\"\r\n                    value={cumulativeCases}\r\n                    lastUpdate={lastUpdated}\r\n                /></Grid>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    Chart,\r\n    ArgumentAxis,\r\n    ValueAxis,\r\n    LineSeries,\r\n    Title,\r\n    Legend,\r\n    Tooltip,\r\n\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Animation, EventTracker } from '@devexpress/dx-react-chart';\r\nimport {\r\n    curveCatmullRom,\r\n    line,\r\n} from 'd3-shape';\r\n\r\nconst Line = props => (\r\n    <LineSeries.Path\r\n        {...props}\r\n        path={line()\r\n            .x(({ arg }) => arg)\r\n            .y(({ val }) => val)\r\n            .curve(curveCatmullRom)}\r\n    />\r\n);\r\n\r\nconst titleStyles = {\r\n    title: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        marginBottom: '10px',\r\n    },\r\n};\r\n\r\nconst Text = withStyles(titleStyles)((props) => {\r\n    const { text, classes } = props;\r\n    const [mainText, subText] = text.split('\\\\n');\r\n    return (\r\n        <div className={classes.title}>\r\n            <Typography component=\"h3\" variant=\"h5\">\r\n                {mainText}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">{subText}</Typography>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst legendStyles = () => ({\r\n    root: {\r\n        display: 'flex',\r\n        margin: 'auto',\r\n        flexDirection: 'row',\r\n    },\r\n});\r\nconst legendLabelStyles = theme => ({\r\n    label: {\r\n        marginBottom: theme.spacing(1),\r\n        whiteSpace: 'nowrap',\r\n    },\r\n});\r\nconst legendItemStyles = () => ({\r\n    item: {\r\n        flexDirection: 'column-reverse',\r\n    },\r\n});\r\n\r\nconst legendRootBase = ({ classes, ...restProps }) => (\r\n    <Legend.Root {...restProps} className={classes.root} />\r\n);\r\nconst legendLabelBase = ({ classes, ...restProps }) => (\r\n    <Legend.Label className={classes.label} {...restProps} />\r\n);\r\nconst legendItemBase = ({ classes, ...restProps }) => (\r\n    <Legend.Item className={classes.item} {...restProps} />\r\n);\r\nconst Root = withStyles(legendStyles, { name: 'LegendRoot' })(legendRootBase);\r\nconst Label = withStyles(legendLabelStyles, { name: 'LegendLabel' })(legendLabelBase);\r\nconst Item = withStyles(legendItemStyles, { name: 'LegendItem' })(legendItemBase);\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginBottom: '2rem'\r\n    },\r\n\r\n}));\r\n\r\nexport default function SplineChart({ country }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper>\r\n                <Chart\r\n                    data={country.chartData}\r\n                >\r\n                    <ArgumentAxis showLabels={false} showTicks={false} />\r\n                    <ValueAxis />\r\n\r\n                    <LineSeries\r\n                        name={country.name}\r\n                        valueField=\"newCasesByPublishDate\"\r\n                        argumentField=\"date\"\r\n                        seriesComponent={Line}\r\n                    />\r\n\r\n                    <Legend position=\"bottom\" rootComponent={Root} itemComponent={Item} labelComponent={Label} />\r\n                    <Title\r\n                        text=\"Daily Covid Cases\"\r\n                        textComponent={Text}\r\n                    />\r\n                    <EventTracker />\r\n                    <Tooltip />\r\n                    <Animation />\r\n                </Chart>\r\n\r\n            </Paper>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    PagingState,\r\n    IntegratedPaging,\r\n} from '@devexpress/dx-react-grid';\r\nimport { Grid, Table, TableHeaderRow, PagingPanel } from '@devexpress/dx-react-grid-material-ui';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DataTypeProvider } from '@devexpress/dx-react-grid';\r\n\r\nconst columns = [\r\n    { name: 'date', title: 'Date' },\r\n    { name: 'newCasesByPublishDate', title: 'Daily Cases' },\r\n    { name: 'cumCasesByPublishDate', title: 'Cumulative Cases' },\r\n];\r\n\r\nconst DateFormatter = ({ value }) => value.replace(/(\\d{4})-(\\d{2})-(\\d{2})/, '$3.$2.$1');\r\n\r\nconst DateTypeProvider = props => (\r\n    <DataTypeProvider\r\n        formatterComponent={DateFormatter}\r\n        {...props}\r\n    />\r\n);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginBottom: '2rem'\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        padding: '1.5rem',\r\n    }\r\n}));\r\n\r\nexport default function GridChart({ country }) {\r\n\r\n    const classes = useStyles();\r\n    const [dateColumns] = useState(['date']);\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\r\n                {'Data'}\r\n            </Typography>\r\n            <Grid\r\n                rows={country.gridData}\r\n                columns={columns}\r\n            >\r\n                <PagingState\r\n                    defaultCurrentPage={0}\r\n                    pageSize={10}\r\n                />\r\n                <IntegratedPaging />\r\n                <DateTypeProvider\r\n                    for={dateColumns}\r\n                />\r\n                <Table />\r\n                <TableHeaderRow />\r\n\r\n                <PagingPanel />\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport CardList from '../card/card-list.component';\r\nimport SplineChart from '../chart/spline-chart.component';\r\nimport GridChart from '../chart/grid-chart.component';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        height: '100vh',\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        marginLeft: '1rem',\r\n        marginRight: '0.5rem'\r\n    }\r\n}));\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default function TabPanel({ value, index, country }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    /*\r\n        COUNTRY:\r\n\r\n        id\r\n        name\r\n        lastUpdated\r\n        lastDailyCases\r\n        cumulativeCases\r\n        dailyData\r\n        days\r\n    */\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            className={classes.root}\r\n        >\r\n            {value === index && (\r\n                <div className={classes.container} >\r\n                    <CardList\r\n                        lastDailyCases={country.lastDailyCases}\r\n                        cumulativeCases={country.cumulativeCases}\r\n                        lastUpdated={country.lastUpdated}\r\n                    />\r\n\r\n                    <SplineChart country={country} />\r\n                    <GridChart country={country} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport TabPanel from './tab-panel.component';\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `vertical-tab-${index}`,\r\n        'aria-controls': `vertical-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n        display: 'flex',\r\n        height: '100vh',\r\n        width: '100%',\r\n    },\r\n    tabs: {\r\n        minWidth: '50px',\r\n        borderRight: `1px solid ${theme.palette.divider}`,\r\n\r\n    },\r\n    tab: {\r\n        marginRight: '1rem',\r\n    },\r\n    panels: {\r\n        width: '100%',\r\n    }\r\n}));\r\n\r\nexport default function VerticalTabs({ data }) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                className={classes.tabs}\r\n            >\r\n                {data && data.map(country => (\r\n                    <Tab key={country.id}\r\n                        index={country.id}\r\n                        label={country.name}\r\n                        className={classes.tab}\r\n                        {...a11yProps(country.id)} />\r\n                ))}\r\n\r\n            </Tabs>\r\n\r\n            <div className={classes.panels} >\r\n                {data && data.map(country => (\r\n                    <TabPanel key={country.id} value={value} index={country.id} country={country} />))}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import axios from 'axios';\r\n\r\nlet countriesData;\r\nlet ukData;\r\nconst count = 0;\r\n\r\nexport const fetchData = async () => {\r\n\r\n    countriesData = await fetchCountryData();\r\n    ukData = await fetchUkData();\r\n\r\n    //reset the id count\r\n    id = 0;\r\n    return sortData();\r\n}\r\n\r\nconst fetchCountryData = async () => {\r\n\r\n    try {\r\n\r\n        let url = 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=nation&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newCasesByPublishDate%22:%22newCasesByPublishDate%22,%22cumCasesByPublishDate%22:%22cumCasesByPublishDate%22%7D&format=json';\r\n        const { data: { data } } = await axios.get(url);\r\n\r\n        /* Data \r\n\r\n        areaCode: \"E92000001\"\r\n        areaName: \"England\"\r\n        areaType: \"nation\"\r\n        cumCasesByPublishDate: 879046\r\n        date: \"2020-11-01\"\r\n        newCasesByPublishDate: 20602\r\n        */\r\n        return await data;\r\n    }\r\n    catch (error) {\r\n        console.log('Function: fetchCountryData \\n' + error);\r\n        return error;\r\n    }\r\n}\r\n\r\nconst fetchUkData = async () => {\r\n\r\n    try {\r\n        let url = 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=overview&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newCasesBySpecimenDate%22:%22newCasesBySpecimenDate%22,%22cumCasesBySpecimenDate%22:%22cumCasesBySpecimenDate%22%7D&format=json';\r\n        const { data: { data } } = await axios.get(url);\r\n\r\n        /* Data\r\n\r\n        areaCode: \"K02000001\"\r\n        areaName: \"United Kingdom\"\r\n        areaType: \"overview\"\r\n        cumCasesBySpecimenDate: 1018878\r\n        date: \"2020-10-29\"\r\n        newCasesBySpecimenDate: 19525\r\n         */\r\n        return data.map(item => convertData(item));;\r\n    }\r\n    catch (error) {\r\n        console.log('Function: fetchUkData \\n' + error);\r\n        return error;\r\n    }\r\n}\r\n// Converts United Kingdom data to others\r\nconst convertData = (item) => {\r\n    let data = {\r\n        areaCode: item.areaCode,\r\n        areaName: item.areaName,\r\n        areaType: item.areaType,\r\n        cumCasesByPublishDate: item.cumCasesBySpecimenDate,\r\n        date: item.date,\r\n        newCasesByPublishDate: item.newCasesBySpecimenDate\r\n    }\r\n    return data;\r\n}\r\n\r\n// Returns all countries in the dataset\r\nexport const sortData = () => {\r\n\r\n    let countryList = [...new Set(countriesData.map(country => country.areaName))];\r\n    countryList.unshift(\"United Kingdom\"); //Add UK to the country list\r\n\r\n    return countryList.map(country => getDataByCountry(country));\r\n}\r\n\r\n//Returns daily cases by selected country\r\nlet id = 0;\r\nexport const getDataByCountry = (country) => {\r\n\r\n    let data = countriesData;\r\n\r\n    if (country === 'United Kingdom')\r\n        data = ukData;\r\n\r\n    let filteredData = data.filter(d => d.areaName === country);\r\n\r\n    //Extract Date and Daily Case Data to use in Charts\r\n    const rawData = filteredData.map(({ date, newCasesByPublishDate }) =>\r\n        ({ date, newCasesByPublishDate }));\r\n\r\n    const gridData = data.filter(d => d.areaName === country).map(({ date, newCasesByPublishDate, cumCasesByPublishDate }) =>\r\n        ({ date, newCasesByPublishDate, cumCasesByPublishDate }));\r\n\r\n    //Get the first one on the list to set the country information\r\n    let first = filteredData[0];\r\n\r\n    //Reverse the chart data \r\n    const chartData = sliceReverse(rawData);\r\n\r\n    //Set the data format \r\n    const countryData = {\r\n        id: id,\r\n        name: first.areaName,\r\n        lastUpdated: first.date,\r\n        lastDailyCases: first.newCasesByPublishDate,\r\n        cumulativeCases: first.cumCasesByPublishDate,\r\n        chartData: chartData,\r\n        gridData: gridData\r\n    }\r\n\r\n    id++;\r\n\r\n    return countryData;\r\n}\r\n\r\n//reverse the dataset to use in the chart\r\nconst sliceReverse = (data) => {\r\n    if (count === 0) {\r\n        return data.reverse();\r\n    }\r\n    return data.slice(0, count).reverse();\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport Header from '../header/header.component';\r\nimport TabList from '../tab/tab-list.component';\r\nimport { fetchData } from '../../api';\r\n\r\nlet data;\r\nexport default class Dashboard extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        data = await fetchData();\r\n        this.setState({ data: data });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.state);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { data } = this.state;\r\n\r\n        return (\r\n            <div >\r\n                <Header />\r\n                <TabList data={data} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport styles from './App.css';\nimport Dashboard from './components/dashboard/dashboard.component';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <Dashboard />\n\n\n    </div>\n  );\n}\n/*\n\n\nyarn add axios\nyarn add react-count-up\n\n\nMaterial-UI:\nyarn add @material-ui/core\nyarn add @material-ui/icons\n\nDevExpress:\nnpm i --save @devexpress/dx-react-core @devexpress/dx-react-chart\nnpm i --save @devexpress/dx-react-chart-material-ui\n\nnpm i --save @devexpress/dx-react-core @devexpress/dx-react-grid\nnpm i --save @devexpress/dx-react-grid-material-ui\n\n*/\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}